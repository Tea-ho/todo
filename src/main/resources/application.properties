# application.properties 스프링 프로젝트의 설정 파일

# 스트링부트 내장톰캣 (기본값: 8080)
# 주의사항: Eclipse랑 동시사용 불가 (종료하고 사용하기)
server.port =8080

# DB 연결 (사용할 DB 정의, 주소 입력, name 및 password 입력)
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/todo
spring.datasource.username=root
spring.datasource.password=1234

# JPA 관련 설정
# 1. JPA 실행 시 자동으로, 테이블 생성 [create 1회 사용 후 주석처리 => 이후 update 사용]
spring.jpa.hibernate.ddl-auto = create
#spring.jpa.hibernate.ddl-auto = update
# 2. JPA가 자동으로 작성한 SQL console 출력하도록 설정 (배포시 사용X)
spring.jpa.properties.hibernate.show_sql = true
spring.jpa.properties.hibernate.format_sql = true

# 로깅설정( @Slf4j )
# 1. 기록할 최소 레벨 선택
logging.level.root = info
# 2. 기록할 파일 경로 지정 [ 경로 / 파일명.log ]
logging.file.name=C:/Java/spring.log

# Oauth2 설정
# 1. 구글
# 1) 발급받은 구글 클라이언트 ID 적용
spring.security.oauth2.client.registration.google.client-id =680267836637-edb1g4fbdkafrs4mimklqb6e66nqmp7g.apps.googleusercontent.com
# 2) 발급받은 구글 클라이언트 PW 적용
spring.security.oauth2.client.registration.google.client-secret =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
# 3) 구글 OAuth 범위 설정한 내용 기입
spring.security.oauth2.client.registration.google.scope = email,profile

# 2. 카카오톡
# 1) 카카오 개발자센터에서 신청한 카카오 로그인 정보
spring.security.oauth2.client.registration.kakao.client-id =da2dcbd47c5a7960e1cea9753827bc10
# 2) 발급받은 카카오 클라이언트 PW 코드 적용
spring.security.oauth2.client.registration.kakao.client-secret =3vVHsUj95X3r6daNsalxq5qLafpzS5QU
# 3) 카카오에서 동의항목 범위 설정한 내용 기입
spring.security.oauth2.client.registration.kakao.client-scope =profile_nickname,account_email
# 4) 추가설정
# 클라이언트 이름 설정
spring.security.oauth2.client.registration.kakao.client-name =kakao
# 인증 토큰 요청 HTTP 메소드 방식 설정
spring.security.oauth2.client.registration.kakao.client-authentication-method =post
# 신청한 redirect-uri 기입
spring.security.oauth2.client.registration.kakao.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
# 토큰 타입 JSON 형식으로 설정
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
# 동의항목 요청시 사용되는 URI 지정
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# 토큰 결과 요청시 사용되는 URI 지정
spring.security.oauth2.client.provider.kakao.token-uri =https://kauth.kakao.com/oauth/token
# 회원정보 요청시 사용되는 URI 지정
spring.security.oauth2.client.provider.kakao.user-info-uri =https://kapi.kakao.com/v2/user/me
# 요청시 회원계정 정보 외 JSON이름[키] 동의항목에서 신청한 정보가 들어있는 키 값
spring.security.oauth2.client.provider.kakao.user-name-attribute=kakao_account

# 3. 네이버
# 1) 네이버 개발자센터에서 신청한 네이버 로그인 정보
spring.security.oauth2.client.registration.naver.client-id =miwJUSpf_xqxBktxcm3s
# 2) 발급받은 네이버 클라이언트 PW 코드 적용
spring.security.oauth2.client.registration.naver.client-secret =TZFtOGeN08
# 3) 네이버에서 동의항목 범위 설정한 내용 기입
spring.security.oauth2.client.registration.naver.client-scope =nickname,email
# 4) 추가설정
# 클라이언트 이름 설정
spring.security.oauth2.client.registration.naver.client-name =naver
# 신청한 redirect-uri 기입
spring.security.oauth2.client.registration.naver.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
# 토큰 타입 JSON 형식으로 설정
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
# 동의항목 요청시 사용되는 URI 지정
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
# 토큰 결과 요청시 사용되는 URI 지정
spring.security.oauth2.client.provider.naver.token-uri =https://nid.naver.com/oauth2.0/token
# 회원정보 요청시 사용되는 URI 지정
spring.security.oauth2.client.provider.naver.user-info-uri =https://openapi.naver.com/v1/nid/me
# 요청시 회원계정 정보 외 JSON이름[키] 동의항목에서 신청한 정보가 들어있는 키 값
spring.security.oauth2.client.provider.naver.user-name-attribute=response